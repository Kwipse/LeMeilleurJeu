using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class RTSCamera : MonoBehaviour
{
    [HideInInspector]
    public bool isZoomActive = true;

    public float vitesseCamera = 2f;
    public float vitesseZoom = 4f;

    public Vector3 InitialCameraPosition;
    public Quaternion InitialCameraRotation; 

    Camera cam;
    Vector3 translation;
    Quaternion rotation;
    Vector3 pivot;
    Vector3 previousMousePos;

    Transform camTarget;

    float timer;

    void Awake()
    {
        cam = GetComponentInChildren<Camera>();
    }

    void Start()
    {
        translation = InitialCameraPosition;
        rotation = InitialCameraRotation;


        Cursor.lockState = CursorLockMode.Confined;
    }

    void OnDisable()
    {
        Cursor.lockState = CursorLockMode.None; //Debloque la souris
    }

    void Update()
    {
        KeyboardInputs();
        MouseInputs();
        UpdateCamera();
    }

    void KeyboardInputs()
    {
        // ZQSD or Arrow keys
        if (Input.GetKey(KeyCode.Z) || Input.GetKey(KeyCode.UpArrow))
        {
            translation.x += transform.forward.x * vitesseCamera;
            translation.z += transform.forward.z * vitesseCamera;
        }
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow))
        {
            translation.x -= transform.forward.x * vitesseCamera;
            translation.z -= transform.forward.z * vitesseCamera;
        }
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow))
        {
            translation.x += transform.right.x * vitesseCamera;
            translation.z += transform.right.z * vitesseCamera;
        }
        if (Input.GetKey(KeyCode.Q) || Input.GetKey(KeyCode.LeftArrow))
        {
            translation.x -= transform.right.x * vitesseCamera;
            translation.z -= transform.right.z * vitesseCamera;
        }

    }


    void MouseInputs()
    {
        if (Input.mouseScrollDelta.y != 0) //Scroll
        {
            if (isZoomActive)
                translation += cam.transform.forward * Input.mouseScrollDelta.y * vitesseZoom;
        }

        if (Input.GetMouseButtonDown(1)) //On clic molette down
        {
            timer = Time.time;
            camTarget = cam.transform;
            previousMousePos = Input.mousePosition;

            pivot = GetMouseGroundHit().point;

            Vector3 offset = pivot - GetCameraCenterHit().point;
            Debug.Log($"Offset : {offset}");

            translation += offset;
        }

        if (Input.GetMouseButton(1)) //During clic molette
        {
            Vector3 newMousePos = Input.mousePosition;
            Vector3 direction = newMousePos - previousMousePos;
            float distance = Vector3.Distance(camTarget.position, pivot);

            //Calculate new transform
            camTarget.Rotate(new Vector3(0, 1, 0), direction.x, Space.World); 
            camTarget.Rotate(new Vector3(1, 0, 0), -direction.y);
            //camTarget.position = pivot;
            camTarget.Translate(new Vector3(0, 0, -distance));
            
            

            //Lerpers
            float elapsedTime = Time.time - timer;
            translation = Vector3.Lerp(translation, camTarget.position, elapsedTime * elapsedTime);
            rotation = Quaternion.Lerp(rotation, camTarget.rotation, elapsedTime * elapsedTime);

            //previousMousePos = newMousePos; 
        }


        if (Input.GetMouseButtonUp(1))
        {

        }

    }


    void UpdateCamera()
    {
        cam.transform.position = translation;
        cam.transform.rotation = rotation;
    }


    public RaycastHit GetMouseGroundHit() {
        Ray ray = cam.ScreenPointToRay(Input.mousePosition);
        Physics.Raycast(ray, out RaycastHit hit, 3000.0f, (1<<8));
        return hit; }

    public RaycastHit GetCameraCenterHit() {
        Ray ray = cam.ScreenPointToRay(new Vector3(Screen.width/2, Screen.height/2, 0));
        Physics.Raycast(ray, out RaycastHit hit, 3000.0f, (1<<8));
        return hit; }


}


